Problem link: https://leetcode.com/problems/longest-palindromic-subsequence/description/

class Solution {
public:
    #define  mxn 1001
    int dp[mxn][mxn];
    string str;
    int func(int b,int e){
       

        if(b==e){
            return dp[b][e]=1;
        }
        if(b>e){
            return dp[b][e]=0;
        }

        if(dp[b][e]!=-1){
            return dp[b][e];
        }

        int res1=0,res2=0;
        

        if(str[b]==str[e]){
           return  dp[b][e]= 2 + func(b+1,e-1);
        }
        else {
            res1 = func(b,e-1);
            res2 = func(b+1,e);

            return dp[b][e]=max(res1,res2);
        }


    }
    
    int longestPalindromeSubseq(string s) {



        str=s;
        int n = s.size();

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }

        int res = func(0,n-1);

        return res;


    }
};
